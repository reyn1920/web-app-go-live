name: CI/CD Pipeline

# Trigger the workflow on push to main branch and pull requests
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Code Quality and Security Checks
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        pip install -r requirements.txt || echo "No requirements.txt found"

    - name: Run ESLint
      run: |
        npx eslint . --ext .js,.jsx,.ts,.tsx --format=compact || echo "ESLint not configured"
      continue-on-error: true

    - name: Run Prettier check
      run: |
        npx prettier --check . || echo "Prettier not configured"
      continue-on-error: true

    - name: Security scan with CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript, python

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

    - name: Scan for secrets with Gitleaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

    - name: Dependency vulnerability scan
      run: |
        npm audit --audit-level=high || echo "No high vulnerabilities found"
        pip check || echo "No Python dependency issues"

  # Automated Testing
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        npm ci
        pip install -r requirements.txt || echo "No requirements.txt found"

    - name: Run unit tests
      run: |
        npm test || echo "No npm tests configured"
        python -m pytest tests/ || echo "No Python tests found"

    - name: Run integration tests
      run: |
        npm run test:integration || echo "No integration tests configured"

    - name: Generate test coverage
      run: |
        npm run test:coverage || echo "No coverage configured"

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

  # Build Application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: |
        npm run build || echo "No build script configured"
      env:
        NODE_ENV: production
        VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: |
          dist/
          build/
          public/
        retention-days: 7

  # Deploy to Staging (Preview)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.preview-url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-files

    - name: Install dependencies
      run: npm ci

    - name: Build for staging
      run: npm run build
      env:
        NODE_ENV: staging
        VITE_API_BASE_URL: ${{ secrets.STAGING_API_BASE_URL }}

    - name: Deploy to Netlify (Preview)
      id: deploy
      uses: nwtgck/actions-netlify@v3.0
      with:
        publish-dir: './dist'
        production-branch: main
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Deploy from GitHub Actions - ${{ github.event.head_commit.message }}"
        enable-pull-request-comment: true
        enable-commit-comment: true
        overwrites-pull-request-comment: true
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
      timeout-minutes: 10

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    
    environment:
      name: production
      url: ${{ secrets.PRODUCTION_URL }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-files

    - name: Install dependencies
      run: npm ci

    - name: Build for production
      run: npm run build
      env:
        NODE_ENV: production
        VITE_API_BASE_URL: ${{ secrets.PRODUCTION_API_BASE_URL }}
        VITE_YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
        VITE_OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    - name: Run production smoke tests
      run: |
        npm run test:smoke || echo "No smoke tests configured"

    - name: Deploy to Netlify (Production)
      uses: nwtgck/actions-netlify@v3.0
      with:
        publish-dir: './dist'
        production-deploy: true
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Production deployment - ${{ github.sha }}"
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
      timeout-minutes: 15

    - name: Notify deployment success
      if: success()
      run: |
        echo "üöÄ Production deployment successful!"
        echo "URL: ${{ secrets.PRODUCTION_URL }}"
        echo "Commit: ${{ github.sha }}"

    - name: Notify deployment failure
      if: failure()
      run: |
        echo "‚ùå Production deployment failed!"
        echo "Please check the logs and fix any issues."

  # Post-deployment health checks
  health-check:
    name: Post-deployment Health Check
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: success()
    
    steps:
    - name: Wait for deployment
      run: sleep 30

    - name: Health check
      run: |
        curl -f ${{ secrets.PRODUCTION_URL }}/health || exit 1
        echo "‚úÖ Health check passed"

    - name: Performance check
      run: |
        # Basic performance check using curl
        response_time=$(curl -o /dev/null -s -w '%{time_total}' ${{ secrets.PRODUCTION_URL }})
        echo "Response time: ${response_time}s"
        # Fail if response time > 5 seconds
        if (( $(echo "$response_time > 5.0" | bc -l) )); then
          echo "‚ùå Performance check failed: Response time too slow"
          exit 1
        fi
        echo "‚úÖ Performance check passed"

  # Security scan post-deployment
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: success()
    
    steps:
    - name: OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.10.0
      with:
        target: ${{ secrets.PRODUCTION_URL }}
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'
      continue-on-error: true

    - name: Upload ZAP results
      uses: actions/upload-artifact@v3
      with:
        name: zap-results
        path: report_html.html
      if: always()